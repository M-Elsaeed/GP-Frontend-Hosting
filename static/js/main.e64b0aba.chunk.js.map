{"version":3,"sources":["classifier/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","require","step1","step2","currentStep","nextStep","newPrediction","Classifier","canvasRef","useRef","imageRef","videoRef","useState","result","setResult","useEffect","a","navigator","mediaDevices","getUserMedia","audio","video","stream","current","srcObject","getCameraStream","interval","setInterval","captureImageFromCamera","formData","FormData","append","config","headers","post","then","response","console","log","data","finalResult","catch","error","clearInterval","playCameraStream","play","context","getContext","videoWidth","videoHeight","width","height","drawImage","toBlob","blob","platform","match","id","controls","autoplay","playsinline","ref","onCanPlay","hidden","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OACMA,EAAQC,EAAQ,IAChBC,EAAQ,oCACRC,EAAQ,qCAEVC,EAAcF,EAClB,SAASG,EAASC,GAChB,OAAQF,GACN,KAAKF,EACkB,KAAjBI,IACFF,EAAcD,GAEhB,MACF,KAAKA,EACkB,KAAjBG,IACFF,EAXU,qBAmBlB,IA8FeG,EA9FI,WACjB,IAAMC,EAAYC,mBACZC,EAAWD,mBACXE,EAAWF,mBAHM,EAKKG,mBAAS,IALd,mBAKhBC,EALgB,KAKRC,EALQ,KAOvBC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACuBC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,EACPC,OAAO,IAHX,OACQC,EADR,OAMMX,EAASY,UACXZ,EAASY,QAAQC,UAAYF,GAPjC,4CADc,uBAAC,WAAD,wBAYdG,KACC,IAEHV,qBAAU,WACR,IAAMW,EAAWC,YAAW,sBAAC,8BAAAX,EAAA,sDAC3BY,IAEIlB,EAASa,WACLM,EAAW,IAAIC,UACZC,OAAO,QAASrB,EAASa,SAE9BS,EAAS,CACXC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,MAGnCjC,EAAMkC,KAAK,iCACTL,EAAUG,GAETG,MAAK,SAAUC,GACdC,QAAQC,IAAIF,EAASG,KAAKC,aAC1BnC,EAAS+B,EAASG,KAAKC,aACvB1B,EAAUsB,EAASG,KAAKC,gBAEzBC,OAAM,SAAUC,GACfL,QAAQC,IAAII,OAtBS,2CAyB1B,KACH,OAAO,kBAAMC,cAAcjB,MAC1B,IAEH,IAAMkB,EAAmB,WACnBjC,EAASY,SACXZ,EAASY,QAAQsB,QAIfjB,EAAyB,WAC7B,IAAMkB,EAAUtC,EAAUe,QAAQwB,WAAW,MADV,EAECpC,EAASY,QAArCyB,EAF2B,EAE3BA,WAAYC,EAFe,EAEfA,YAEpBzC,EAAUe,QAAQ2B,MAAQF,EAC1BxC,EAAUe,QAAQ4B,OAASF,EAE3BH,EAAQM,UAAUzC,EAASY,QAAS,EAAG,EAAGyB,EAAYC,GAEtDzC,EAAUe,QAAQ8B,QAAO,SAACC,GACxB5C,EAASa,QAAU+B,MAIvB,OACE,qCACE,iCACE,iDAEF,iCACE,yCAAYlD,KAIPa,UAAUsC,SAASC,MAAM,oBAC1B,uBAAOC,GAAG,QAAQC,SAAS,OAAOC,UAAQ,EAACC,aAAW,EAACC,IAAKlD,EAAUmD,UAAW,kBAAMlB,OACrF,uBAAOa,GAAG,QAAQE,UAAQ,EAACC,aAAW,EAACC,IAAKlD,EAAUmD,UAAW,kBAAMlB,OAG7E,wBAAQiB,IAAKrD,EAAWuD,QAAM,IAC9B,mDAAsBlD,YCpGfmD,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e64b0aba.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nconst axios = require('axios');\r\nconst step1 = \"Put the swab in your left nostril\"\r\nconst step2 = \"Put the swab in your right nostril\"\r\nconst finalStep = \"Put in solution.\"\r\nlet currentStep = step1\r\nfunction nextStep(newPrediction) {\r\n  switch (currentStep) {\r\n    case step1:\r\n      if (newPrediction == \"L\") {\r\n        currentStep = step2\r\n      }\r\n      break;\r\n    case step2:\r\n      if (newPrediction == \"R\") {\r\n        currentStep = finalStep\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n}\r\nconst Classifier = () => {\r\n  const canvasRef = useRef();\r\n  const imageRef = useRef();\r\n  const videoRef = useRef();\r\n\r\n  const [result, setResult] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function getCameraStream() {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: false,\r\n        video: true,\r\n      });\r\n\r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n      }\r\n    };\r\n\r\n    getCameraStream();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      captureImageFromCamera();\r\n\r\n      if (imageRef.current) {\r\n        const formData = new FormData();\r\n        formData.append('image', imageRef.current);\r\n\r\n        var config = {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        }\r\n        axios.post(\"http://127.0.0.1:5000/classify\",\r\n          formData, config\r\n        )\r\n          .then(function (response) {\r\n            console.log(response.data.finalResult);\r\n            nextStep(response.data.finalResult)\r\n            setResult(response.data.finalResult)\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      }\r\n    }, 200);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const playCameraStream = () => {\r\n    if (videoRef.current) {\r\n      videoRef.current.play();\r\n    }\r\n  };\r\n\r\n  const captureImageFromCamera = () => {\r\n    const context = canvasRef.current.getContext('2d');\r\n    const { videoWidth, videoHeight } = videoRef.current;\r\n\r\n    canvasRef.current.width = videoWidth;\r\n    canvasRef.current.height = videoHeight;\r\n\r\n    context.drawImage(videoRef.current, 0, 0, videoWidth, videoHeight);\r\n\r\n    canvasRef.current.toBlob((blob) => {\r\n      imageRef.current = blob;\r\n    })\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>Xtrava GP '21</h1>\r\n      </header>\r\n      <main>\r\n        <h3>Please {currentStep}</h3>\r\n        {/*if _iOSDevice =  */}\r\n        {\r\n\r\n          (!!navigator.platform.match(/iPhone|iPod|iPad/)) ?\r\n            <video id=\"video\" controls=\"true\" autoplay playsinline ref={videoRef} onCanPlay={() => playCameraStream()}></video>\r\n            : <video id=\"video\" autoplay playsinline ref={videoRef} onCanPlay={() => playCameraStream()}></video>\r\n\r\n        }\r\n        <canvas ref={canvasRef} hidden></canvas>\r\n        <p>Currently seeing: {result}</p>\r\n      </main>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Classifier;","import './App.css';\nimport Classifier from './classifier';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Classifier />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}